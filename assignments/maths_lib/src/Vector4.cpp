#pragma once
#include "MtxVec4.h"

/***************************************************************************

***************************************************************************/
Vector4::Vector4()
{
	m_x = 0.0f;
	m_y = 0.0f;
	m_z = 0.0f;
	m_w = 0.0f;

}
/***************************************************************************

***************************************************************************/
Vector4::Vector4(float x, float y, float z, float w)
{
	m_x = x;
	m_y = y;
	m_z = z;
	m_w = w;
}
/***************************************************************************

***************************************************************************/
Vector4::Vector4(Vector4 & v4)
{
	m_x = v4.m_x;
	m_y = v4.m_y;
	m_z = v4.m_z;
	m_w = v4.m_w;
}
/***************************************************************************

***************************************************************************/
Vector4::Vector4(Vector3 & v3)
{
	m_x = v3.m_x;
	m_y = v3.m_y;
	m_z = v3.m_z;
	m_w = 0.0f;
}
/***************************************************************************

***************************************************************************/
Vector4::Vector4(Vector2 & v2)
{
	m_x = v2.m_x;
	m_y = v2.m_y;
	m_z = 0.0f;
	m_w = 0.0f;
}
/***************************************************************************

***************************************************************************/
Vector4::~Vector4()
{
}
/***************************************************************************

***************************************************************************/
Vector4 Vector4::scale(float scaler)
{
	Vector4 result(scaler * m_x, scaler * m_y, scaler * m_z, scaler * m_w);
	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 Vector4::cross(Vector4 & v4)
{
	float x = (m_y * v4.m_z) - (m_z * v4.m_y);
	float y = (m_z * v4.m_x) - (m_x * v4.m_z);
	float z = (m_x * v4.m_y) - (m_y * v4.m_x);
	float w = 0;

	m_x = x;
	m_y = y;
	m_z = z;
	m_w = w;

	return *this;
}
/***************************************************************************

***************************************************************************/
float Vector4::dot(Vector4 & v4)
{
	float result = (m_x * v4.m_x) + (m_y * v4.m_y) + (m_z * v4.m_z) + (m_w * v4.m_w);
	return result;
}
/***************************************************************************

***************************************************************************/
float Vector4::magnitude()
{
	float result;

	result = (float)sqrt((m_x * m_x) + (m_y * m_y) + (m_z * m_z) + (m_w * m_w));

	return result;
}
/***************************************************************************

***************************************************************************/
void Vector4::normalise()
{
	float length = this->magnitude();
	m_x = m_x / length;
	m_y = m_y / length;
	m_z = m_z / length;
	m_w = m_w / length;
}
/***************************************************************************

***************************************************************************/
Vector4::operator float*()
{
	m_fcast[0] = m_x;
	m_fcast[1] = m_y;
	m_fcast[2] = m_z;
	m_fcast[3] = m_z;

	return m_fcast;
}
/***************************************************************************

***************************************************************************/
Vector4 &Vector4::operator=(Vector4 & v4)
{
	m_x = v4.m_x;
	m_y = v4.m_y;
	m_z = v4.m_z;
	m_w = v4.m_w;

	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 & Vector4::operator=(Vector3 & v3)
{
	m_x = v3.m_x;
	m_y = v3.m_y;
	m_z = v3.m_z;
	m_w = 0.0f;
	
	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 & Vector4::operator=(Vector2 & v2)
{
	m_x = v2.m_x;
	m_y = v2.m_y;
	m_z = 0.0f;
	m_w = 0.0f;

	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 & Vector4::operator+=(const Vector4 & v4b)
{
	m_x += v4b.m_x;
	m_y += v4b.m_y;
	m_z += v4b.m_z;
	m_w += v4b.m_w;

	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 & Vector4::operator-=(const Vector4 & v4b)
{
	m_x -= v4b.m_x;
	m_y -= v4b.m_y;
	m_z -= v4b.m_z;
	m_w -= v4b.m_w;

	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 & Vector4::operator*=(const Vector4 & v4b)
{
	m_x *= v4b.m_x;
	m_y *= v4b.m_y;
	m_z *= v4b.m_z;
	m_w *= v4b.m_w;

	return *this;
}
/***************************************************************************

***************************************************************************/
Vector4 operator+(Vector4 & v4a, Vector4 & v4b)
{
	Vector4 result(v4a);
	result += v4b;

	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator-(Vector4 & v4a, Vector4 & v4b)
{
	Vector4 result(v4a);
	result -= v4b;

	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator*(Vector4 & v4a, Vector4 & v4b)
{
	Vector4 result(v4a);
	result *= v4b;

	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator*(float f, Vector4 & v4)
{
	Vector4 result(f * v4.m_x, f * v4.m_y, f * v4.m_z, f * v4.m_w);
	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator*(Vector4 & v4, float f)
{
	Vector4 result(v4.m_x * f, v4.m_y * f, v4.m_z * f, v4.m_w * f);
	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator*(Vector4 & v4, Matrix4 & m4)
{
	Vector4 result(0.0f, 0.0f, 0.0f, 0.0f);
	result.m_x = (v4.m_x * m4.m_column1->m_x) +
				 (v4.m_y * m4.m_column2->m_x) +
				 (v4.m_z * m4.m_column3->m_x) +
				 (v4.m_w * m4.m_column4->m_x);
										   
	result.m_y = (v4.m_x * m4.m_column1->m_y) +
				 (v4.m_y * m4.m_column2->m_y) +
				 (v4.m_z * m4.m_column3->m_y) +
				 (v4.m_w * m4.m_column4->m_y);
										   
	result.m_z = (v4.m_x * m4.m_column1->m_z) +
				 (v4.m_y * m4.m_column2->m_z) +
				 (v4.m_z * m4.m_column3->m_z) +
				 (v4.m_w * m4.m_column4->m_z);

	result.m_w = (v4.m_x * m4.m_column1->m_w) +
				 (v4.m_y * m4.m_column2->m_w) +
				 (v4.m_z * m4.m_column3->m_w) +
				 (v4.m_w * m4.m_column4->m_w);

	return result;
}
/***************************************************************************

***************************************************************************/
Vector4 operator*(Matrix4 & m4, Vector4 & v4)
{
	Vector4 result(0.0f, 0.0f, 0.0f, 0.0f);
	result.m_x = (m4.m_column1->m_x * v4.m_x) +
				 (m4.m_column2->m_x * v4.m_y) +
				 (m4.m_column3->m_x * v4.m_z) +
				 (m4.m_column4->m_x * v4.m_w);
				 							
	result.m_y = (m4.m_column1->m_y * v4.m_x) +
				 (m4.m_column2->m_y * v4.m_y) +
				 (m4.m_column3->m_y * v4.m_z) +
				 (m4.m_column4->m_y * v4.m_w);
				 							
	result.m_z = (m4.m_column1->m_z * v4.m_x) +
				 (m4.m_column2->m_z * v4.m_y) +
				 (m4.m_column3->m_z * v4.m_z) +
				 (m4.m_column4->m_z * v4.m_w);

	result.m_w = (m4.m_column1->m_w * v4.m_x) +
				 (m4.m_column2->m_w * v4.m_y) +
				 (m4.m_column3->m_w * v4.m_z) +
				 (m4.m_column4->m_w * v4.m_w);

	return result;
}
